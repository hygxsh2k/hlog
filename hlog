#!/usr/bin/env perl

use strict;
use warnings;
use v5.16;
use Storable;
use IPC::Open3;
use File::Temp qw/ tempfile /;
use Getopt::Long qw/ :config posix_default no_ignore_case gnu_compat /;

my %opts = ();
GetOptions(\%opts, 'store|s', 'get|g', 'diff|d', 'diff2|2', 'help|h');

my $hlog_file = $ENV{HLOG} // "$ENV{HOME}/.hlog";
if (not -e $hlog_file) {
	store {}, $hlog_file; 
	chmod 0600, $hlog_file ;
}
my $hlog = retrieve $hlog_file;

my $cmd = join ' ', @ARGV;
$cmd = $hlog->{'$_'} if ($cmd eq '');

if ($opts{get}) {
	# Show specified command result

	if (defined $hlog->{$cmd}->[0]) {
	        print $hlog->{$cmd}->[0];
	} else {
	        die "[HLOG] not stored command: '$cmd'";
	}
	
} elsif ($opts{diff}) {
	# Show the difference of specified command results

	if (defined $hlog->{$cmd}->[1]) {
	        my ($fh_a, $filename_a) = tempfile( UNLINK => 1 );
	        print $fh_a $hlog->{$cmd}->[1];
	        close $fh_a;
	        my ($fh_b, $filename_b) = tempfile( UNLINK => 1 );
	        print $fh_b $hlog->{$cmd}->[0];
	        close $fh_b;
	        print `diff -u --label a --label b $filename_a $filename_b`;
	} else {
	        die "[HLOG] need to store at least twice: '$cmd'";
	}

} elsif ($opts{diff2}) {
	# Show difference of differences of most recent specified command results
	if (defined $hlog->{$cmd}->[2]) {
	        my ($fh_a, $filename_a) = tempfile( UNLINK => 1 );
	        print $fh_a $hlog->{$cmd}->[2];
	        close $fh_a;
	        my ($fh_b, $filename_b) = tempfile( UNLINK => 1 );
	        print $fh_b $hlog->{$cmd}->[1];
	        close $fh_b;
	        my ($fh_c, $filename_c) = tempfile( UNLINK => 1 );
	        print $fh_c $hlog->{$cmd}->[0];
	        close $fh_c;
	        my ($fh_ab, $filename_ab) = tempfile( UNLINK => 1);
	        print $fh_ab `diff -u $filename_a $filename_b | tail -n+3`;
	        close $fh_ab;
	        my ($fh_bc, $filename_bc) = tempfile( UNLINK => 1);
	        print $fh_bc `diff -u $filename_b $filename_c | tail -n+3`;
	        close $fh_bc;
	        print `diff -u $filename_ab $filename_bc | tail -n+3`;
	
	} else {
	        die "[HLOG] need to store at least three times: '$cmd'";
	}

} elsif ($opts{help} or "$cmd" eq '') { 

	say STDERR "usage: hlog [-s|--store] [-g|--get] [-d|--diff] [-2|--diff2] [-h|--help] [CMD]";

} else {
	# Execute specified command and Store its result
	my $rdr;

	my $pid;
	eval { $pid = open3(\*STDIN, $rdr, $rdr, $cmd) };
	if ($@) {
		die "[HLOG] failed to execute '$cmd': $@";
	}
	
	waitpid $pid, 0;
	my $cmd_out = '';
	while(<$rdr>) {
	        print;
	        $cmd_out .= $_;
	}
	close $rdr;
	
	unshift @{$hlog->{$cmd}}, $cmd_out;
	splice  @{$hlog->{$cmd}}, 3;
	
	$hlog->{'$_'} = $cmd;
	
	store $hlog, $hlog_file;

}
